<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8"> 
    <title>Hand-Written Digit Classifier (Trained in Tensorflow)</title>
    <script id="nd.js" type="text/javascript">
      {ND}
    </script>
  </head>
  <body>
    <script type="text/javascript">
    'use strict'; {{
      const header = document.createElement('div');
      header.innerHTML = 'Draw a decimal digit:'
      document.body.appendChild(header);

      // JS code Blob for the Web-Worker
      let classifier = new Blob(
        [`
          ${{ document.getElementById('nd.js').innerHTML }}

          let model = {MODEL}
          model = new model(true)

          self.onmessage = msg => {{
//console.time('CLASSIFY_IMG')
            let images = msg.data
            // convert Uint8Array => nd.Array
            images = new nd.Array( [1,28,28,4], Float32Array.from(images, x => x / 765.0 ) )
            // select and average RGB channels
            images = images
              .slice('...',[0,3,])
              .reduce(-1, 'float32', (x,y) => x+y )
              .reshape(1,28,28,1)
//console.log( images.reshape(1,28,28).toString() )
            const prediction = model({{ 'in/images:0': images }})
            self.postMessage(prediction.data);
//console.timeEnd('CLASSIFY_IMG')
          }};
        `],
        {{ type: 'application/javascript' }}
      );

      const
        canvas = document.createElement('canvas'),
        status = document.createElement('div')
      canvas.width = 28;
      canvas.height= 28;
      canvas.style.width ='280px';
      canvas.style.height='280px';
      document.body.appendChild(canvas)
      document.body.appendChild(status)

      const ctx = canvas.getContext('2d');

      const progressBars = Array.from({{ length: 10 }}, (_,i) => {{
        const
          progressBar  = document.createElement('progress'),
          progressLabel= document.createElement('div'),
          div = document.createElement('div')
        progressLabel.style.display = 'inline'
        progressBar.value=0
        progressBar.max=1.0
        div.innerHTML = i
        div.appendChild(progressBar)
        div.appendChild(progressLabel)
        document.body.appendChild(div)
        return [progressBar,progressLabel]
      }})

      let
        classifierRunning = false,
        classifierNext = null
      classifier = new Worker( URL.createObjectURL(classifier) );
      classifier.onmessage = msg => {{
        if( classifierNext != null )
        {{
          classifier.postMessage(classifierNext)
          classifierNext = null
        }}
        else {{
          status.innerHTML = ''
          classifierRunning = false
        }}
        const max = Math.max(...msg.data)
        msg.data.forEach( (progress,i) => {{
          progressBars[i][0].value = progress
          let str = `${{(progress*100).toFixed(1)}}%`
          if( max == progress )
            str = `<b>${{str}}</b>`
          progressBars[i][1].innerHTML = str
        }})
      }}

      function reclassify()
      {{
        let data = ctx.getImageData(0,0, canvas.width, canvas.height).data
//        progressBars.forEach( bar_label => {{ bar_label[0].value=0; bar_label[1].innerHTML='' }} ) // <- only necessary if classifier is too slow
        if( ! classifierRunning ) {{
          status.innerHTML = 'Calculating...'
          classifier.postMessage(data)
          classifierRunning = true
        }}
        else classifierNext = data
      }}

      function mousePos( event )
      {{
        const bounds = canvas.getBoundingClientRect();
        return [
          (event.clientX - bounds.left) / 10,
          (event.clientY - bounds.top ) / 10
        ];
      }}


      canvas.addEventListener(
        'mousedown',
        e => {{
          if( e.buttons == 1 ) {{
            ctx.beginPath();
            ctx.strokeStyle = 'white';
            ctx.moveTo( ...mousePos(e) );
          }}
        }}
      );
      canvas.addEventListener(
        'mousemove',
        e => {{
          if( e.buttons == 1 ) {{
            ctx.lineTo( ...mousePos(e) );
            ctx.stroke();
            reclassify();
          }}
        }}
      );

      const clear = document.createElement('button')
      clear.innerHTML = 'Clear'
      clear.onclick = e => {{
        ctx.fillStyle = 'black'
        ctx.fillRect(0,0, canvas.width, canvas.height)
        progressBars.forEach( bar_label => {{ bar_label[0].value=0; bar_label[1].innerHTML='' }} )
      }}
      clear.onclick()
      document.body.appendChild(clear)
    }}
    </script>
  </body>
</html>
